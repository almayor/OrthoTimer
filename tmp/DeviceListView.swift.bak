import SwiftUI
import OrthoTimeTrackerCore

struct DeviceListView: View {
    @EnvironmentObject private var deviceManager: OTTDeviceManager
    @State private var showingAddDevice = false
    @State private var newDeviceName = ""
    @State private var deviceToDelete: IndexSet?
    @State private var showingDeleteConfirmation = false
    @State private var expandedDeviceId: UUID? = nil
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                List {
                    ForEach(deviceManager.devices) { device in
                        DeviceExpandableRowView(
                            device: device,
                            isExpanded: expandedDeviceId == device.id,
                            toggleExpand: {
                                if expandedDeviceId == device.id {
                                    expandedDeviceId = nil
                                } else {
                                    expandedDeviceId = device.id
                                }
                            }
                        )
                    }
                    .onDelete { indexSet in
                        deviceToDelete = indexSet
                        showingDeleteConfirmation = true
                    }
                }
                .listStyle(PlainListStyle())
            }
            .navigationTitle("My Devices")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: {
                        showingAddDevice = true
                    }) {
                        Label("Add Device", systemImage: "plus")
                    }
                }
            }
            .alert("Add New Device", isPresented: $showingAddDevice) {
                TextField("Device Name", text: $newDeviceName)
                Button("Cancel", role: .cancel) {
                    newDeviceName = ""
                }
                Button("Add") {
                    if !newDeviceName.isEmpty {
                        deviceManager.addDevice(name: newDeviceName)
                        newDeviceName = ""
                    }
                }
            }
            .confirmationDialog(
                "Are you sure you want to delete this device?",
                isPresented: $showingDeleteConfirmation,
                titleVisibility: .visible
            ) {
                Button("Delete", role: .destructive) {
                    if let indexSet = deviceToDelete {
                        deviceManager.deleteDevice(at: indexSet)
                        deviceToDelete = nil
                    }
                }
                Button("Cancel", role: .cancel) {
                    deviceToDelete = nil
                }
            }
        }
    }
}

struct DeviceExpandableRowView: View {
    let device: OTTDevice
    let isExpanded: Bool
    let toggleExpand: () -> Void
    @EnvironmentObject private var deviceManager: OTTDeviceManager
    @State private var deviceName: String
    @State private var showingRenameAlert = false
    @State private var showingExportSheet = false
    @State private var csvData: String = ""
    
    init(device: OTTDevice, isExpanded: Bool, toggleExpand: @escaping () -> Void) {
        self.device = device
        self.isExpanded = isExpanded
        self.toggleExpand = toggleExpand
        _deviceName = State(initialValue: device.name)
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Main row content
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    HStack {
                        Text(device.name)
                            .font(.headline)
                        
                        Button(action: {
                            showingRenameAlert = true
                        }) {
                            Image(systemName: "pencil")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        .buttonStyle(BorderlessButtonStyle())
                    }
                    
                    Text(TimeUtils.formattedTime(device.totalTime()))
                        .font(.system(.subheadline, design: .monospaced))
                        .foregroundColor(device.isRunning ? .accentColor : .secondary)
                }
                
                Spacer()
                
                // Start/Stop Button
                Button(action: {
                    deviceManager.toggleTimer(for: device)
                }) {
                    Text(device.isRunning ? "Stop" : "Start")
                        .font(.subheadline)
                        .fontWeight(.medium)
                        .padding(.horizontal, 12)
                        .padding(.vertical, 6)
                        .background(device.isRunning ? Color.red : Color.accentColor)
                        .foregroundColor(.white)
                        .cornerRadius(8)
                }
                .buttonStyle(BorderlessButtonStyle())
                
                // Expand/collapse button
                Button(action: toggleExpand) {
                    Image(systemName: isExpanded ? "chevron.up" : "chevron.down")
                        .foregroundColor(.secondary)
                        .frame(width: 30)
                }
                .buttonStyle(BorderlessButtonStyle())
            }
            .padding(.vertical, 8)
            
            // Expanded content
            if isExpanded {
                VStack(alignment: .leading, spacing: 12) {
                    Divider()
                    
                    // Stats view without export sheet
                    StatsContentView(device: device)
                    
                    // Export button
                    Button(action: {
                        generateCSV()
                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                            showingExportSheet = true
                        }
                    }) {
                        HStack {
                            Image(systemName: "square.and.arrow.up")
                            Text("Export Data")
                        }
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 8)
                        .background(Color.accentColor)
                        .foregroundColor(.white)
                        .cornerRadius(8)
                    }
                    .buttonStyle(BorderlessButtonStyle())
                    .padding(.top, 8)
                }
                .padding(.vertical, 8)
                .padding(.horizontal, 8)
                .transition(.opacity)
            }
        }
        .contentShape(Rectangle()) // Make the entire row tappable
        .onTapGesture {
            toggleExpand()
        }
        .alert("Rename Device", isPresented: $showingRenameAlert) {
            TextField("Device Name", text: $deviceName)
            Button("Cancel", role: .cancel) { }
            Button("Save") {
                if !deviceName.isEmpty && deviceName != device.name {
                    var updatedDevice = device
                    updatedDevice.name = deviceName
                    deviceManager.updateDevice(updatedDevice)
                }
            }
        }
        .sheet(isPresented: $showingExportSheet) {
            ExportView(csvData: csvData, deviceName: device.name)
        }
    }
    
    // Generate CSV data for export
    private func generateCSV() {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        
        var csv = "Date,Hours Worn\n"
        
        // Combine and sort all statistics
        var allStats: [(Date, TimeInterval)] = []
        for (date, time) in device.monthlyStats {
            allStats.append((date, time))
        }
        
        // Sort by date (newest first)
        allStats.sort { $0.0 > $1.0 }
        
        // Add each day to CSV
        for (date, time) in allStats {
            let hours = time / 3600
            csv.append("\(formatter.string(from: date)),\(String(format: "%.2f", hours))\n")
        }
        
        self.csvData = csv
    }
}

// This new view has only stats display without the export functionality
struct StatsContentView: View {
    let device: OTTDevice
    @State private var selectedTab = 0
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            // Today's stats
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text("Today's wear time")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    Text(TimeUtils.formattedTime(device.totalTime()))
                        .font(.system(.headline, design: .monospaced))
                }
                
                Spacer()
                
                VStack(alignment: .trailing, spacing: 4) {
                    Text("Current status")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    Text(device.isRunning ? "Active" : "Not worn")
                        .font(.headline)
                        .foregroundColor(device.isRunning ? .accentColor : .secondary)
                }
            }
            
            // Tab selector for weekly/monthly stats
            Picker("Statistics Period", selection: $selectedTab) {
                Text("Weekly").tag(0)
                Text("Monthly").tag(1)
            }
            .pickerStyle(SegmentedPickerStyle())
            .padding(.vertical, 8)
            
            // Weekly or monthly stats based on selection
            if selectedTab == 0 {
                // Weekly stats
                weeklyStatsView()
            } else {
                // Monthly stats
                monthlyStatsView()
            }
        }
    }
    
    // Weekly statistics view
    private func weeklyStatsView() -> some View {
        VStack(alignment: .leading, spacing: 4) {
            Text("Weekly statistics")
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            HStack(alignment: .bottom, spacing: 4) {
                ForEach(weekDays(), id: \.0) { (date, timeInterval) in
                    VStack {
                        // Height proportional to wear time
                        RoundedRectangle(cornerRadius: 4)
                            .fill(Color.accentColor.opacity(0.7))
                            .frame(height: barHeight(for: timeInterval))
                        
                        Text(dayFormatter.string(from: date))
                            .font(.caption2)
                            .foregroundColor(.secondary)
                            
                        Text(hourFormatter(timeInterval))
                            .font(.system(.caption2, design: .monospaced))
                            .foregroundColor(.secondary)
                    }
                    .frame(maxWidth: .infinity)
                }
            }
            .frame(height: 130)
            .padding(.top, 4)
            
            // Weekly average
            HStack {
                Text("Weekly average:")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Text(TimeUtils.formattedTime(weeklyAverage()))
                    .font(.system(.caption, design: .monospaced))
                    .fontWeight(.medium)
            }
            .padding(.top, 4)
        }
    }
    
    // Monthly statistics view
    private func monthlyStatsView() -> some View {
        VStack(alignment: .leading, spacing: 4) {
            Text("Monthly statistics")
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(alignment: .bottom, spacing: 4) {
                    ForEach(monthDays(), id: \.0) { (date, timeInterval) in
                        VStack {
                            // Height proportional to wear time
                            RoundedRectangle(cornerRadius: 4)
                                .fill(Color.accentColor.opacity(0.7))
                                .frame(height: barHeight(for: timeInterval))
                                .frame(width: 12)
                            
                            Text(dayOfMonthFormatter.string(from: date))
                                .font(.system(.caption2, design: .monospaced))
                                .foregroundColor(.secondary)
                                
                            Text(hourFormatter(timeInterval))
                                .font(.system(.caption2, design: .monospaced))
                                .foregroundColor(.secondary)
                        }
                        .frame(width: 30)
                    }
                }
            }
            .frame(height: 130)
            .padding(.top, 4)
            
            // Monthly average
            HStack {
                Text("Monthly average:")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Text(TimeUtils.formattedTime(monthlyAverage()))
                    .font(.system(.caption, design: .monospaced))
                    .fontWeight(.medium)
            }
            .padding(.top, 4)
        }
    }
    
    // Helper methods for stats
    
    // Calculate days for weekly stats
    private func weekDays() -> [(Date, TimeInterval)] {
        let calendar = Calendar.current
        let today = calendar.startOfDay(for: Date())
        
        var days: [(Date, TimeInterval)] = []
        for i in 0..<7 {
            guard let date = calendar.date(byAdding: .day, value: -i, to: today) else { continue }
            let time = device.weeklyStats[date] ?? 0
            days.append((date, time))
        }
        
        return days.reversed()
    }
    
    // Calculate days for monthly stats
    private func monthDays() -> [(Date, TimeInterval)] {
        let calendar = Calendar.current
        let today = calendar.startOfDay(for: Date())
        
        var days: [(Date, TimeInterval)] = []
        for i in 0..<30 {
            guard let date = calendar.date(byAdding: .day, value: -i, to: today) else { continue }
            let time = device.monthlyStats[date] ?? 0
            days.append((date, time))
        }
        
        return days.reversed()
    }
    
    // Calculate weekly average
    private func weeklyAverage() -> TimeInterval {
        let days = weekDays()
        let totalTime = days.reduce(0) { $0 + $1.1 }
        return days.isEmpty ? 0 : totalTime / Double(days.count)
    }
    
    // Calculate monthly average
    private func monthlyAverage() -> TimeInterval {
        let days = monthDays()
        let totalTime = days.reduce(0) { $0 + $1.1 }
        return days.isEmpty ? 0 : totalTime / Double(days.count)
    }
    
    // Calculate bar height based on wear time
    private func barHeight(for timeInterval: TimeInterval) -> CGFloat {
        let maxHeight: CGFloat = 80
        let hoursWorn = timeInterval / 3600
        
        // Target is typically 8-22 hours for orthodontic devices
        let targetHours: Double = 16
        
        // Scale height proportionally, max out at 22 hours
        return min(maxHeight * CGFloat(hoursWorn / targetHours), maxHeight)
    }
    
    // Format hours for display under bars
    private func hourFormatter(_ timeInterval: TimeInterval) -> String {
        let hours = Int(timeInterval / 3600)
        return "\(hours)h"
    }
    
    private let dayFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "E"
        return formatter
    }()
    
    private let dayOfMonthFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "d"
        return formatter
    }()
}

// View for exporting CSV data
struct ExportView: View {
    let csvData: String
    let deviceName: String
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            VStack {
                Text("Export Data for \(deviceName)")
                    .font(.headline)
                    .padding()
                
                ScrollView {
                    Text(csvData)
                        .font(.system(.body, design: .monospaced))
                        .padding()
                }
                .background(Color.secondary.opacity(0.1))
                .cornerRadius(8)
                .padding()
                
                Button(action: {
                    shareCSV()
                }) {
                    HStack {
                        Image(systemName: "square.and.arrow.up")
                        Text("Share CSV File")
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.accentColor)
                    .foregroundColor(.white)
                    .cornerRadius(8)
                }
                .padding()
            }
            .navigationBarItems(trailing: Button("Done") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
    
    private func shareCSV() {
        // Create a temporary file
        let filename = "\(deviceName.replacingOccurrences(of: " ", with: "_"))_wear_time.csv"
        let path = FileManager.default.temporaryDirectory.appendingPathComponent(filename)
        
        do {
            try csvData.write(to: path, atomically: true, encoding: .utf8)
            
            // Create the share sheet
            let activityVC = UIActivityViewController(
                activityItems: [path],
                applicationActivities: nil
            )
            
            // Present the share sheet
            if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
               let rootViewController = windowScene.windows.first?.rootViewController {
                rootViewController.present(activityVC, animated: true, completion: nil)
            }
        } catch {
            print("Error creating CSV file: \(error)")
        }
    }
}

struct DeviceListView_Previews: PreviewProvider {
    static var previews: some View {
        DeviceListView()
            .environmentObject(OTTDeviceManager())
    }
}
            
            HStack(alignment: .bottom, spacing: 4) {
                ForEach(weekDays(), id: \.0) { (date, timeInterval) in
                    VStack {
                        // Height proportional to wear time
                        RoundedRectangle(cornerRadius: 4)
                            .fill(Color.accentColor.opacity(0.7))
                            .frame(height: barHeight(for: timeInterval))
                        
                        Text(dayFormatter.string(from: date))
                            .font(.caption2)
                            .foregroundColor(.secondary)
                            
                        Text(hourFormatter(timeInterval))
                            .font(.system(.caption2, design: .monospaced))
                            .foregroundColor(.secondary)
                    }
                    .frame(maxWidth: .infinity)
                }
            }
            .frame(height: 130)
            .padding(.top, 4)
            
            // Weekly average
            HStack {
                Text("Weekly average:")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Text(TimeUtils.formattedTime(weeklyAverage()))
                    .font(.system(.caption, design: .monospaced))
                    .fontWeight(.medium)
            }
            .padding(.top, 4)
        }
    }
    
    // Monthly statistics view
    private func monthlyStatsView() -> some View {
        VStack(alignment: .leading, spacing: 4) {
            Text("Monthly statistics")
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(alignment: .bottom, spacing: 4) {
                    ForEach(monthDays(), id: \.0) { (date, timeInterval) in
                        VStack {
                            // Height proportional to wear time
                            RoundedRectangle(cornerRadius: 4)
                                .fill(Color.accentColor.opacity(0.7))
                                .frame(height: barHeight(for: timeInterval))
                                .frame(width: 12)
                            
                            Text(dayOfMonthFormatter.string(from: date))
                                .font(.system(.caption2, design: .monospaced))
                                .foregroundColor(.secondary)
                                
                            Text(hourFormatter(timeInterval))
                                .font(.system(.caption2, design: .monospaced))
                                .foregroundColor(.secondary)
                        }
                        .frame(width: 30)
                    }
                }
            }
            .frame(height: 130)
            .padding(.top, 4)
            
            // Monthly average
            HStack {
                Text("Monthly average:")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Text(TimeUtils.formattedTime(monthlyAverage()))
                    .font(.system(.caption, design: .monospaced))
                    .fontWeight(.medium)
            }
            .padding(.top, 4)
        }
    }
    
    // Calculate days for weekly stats
    private func weekDays() -> [(Date, TimeInterval)] {
        let calendar = Calendar.current
        let today = calendar.startOfDay(for: Date())
        
        var days: [(Date, TimeInterval)] = []
        for i in 0..<7 {
            guard let date = calendar.date(byAdding: .day, value: -i, to: today) else { continue }
            let time = device.weeklyStats[date] ?? 0
            days.append((date, time))
        }
        
        return days.reversed()
    }
    
    // Calculate days for monthly stats
    private func monthDays() -> [(Date, TimeInterval)] {
        let calendar = Calendar.current
        let today = calendar.startOfDay(for: Date())
        
        var days: [(Date, TimeInterval)] = []
        for i in 0..<30 {
            guard let date = calendar.date(byAdding: .day, value: -i, to: today) else { continue }
            let time = device.monthlyStats[date] ?? 0
            days.append((date, time))
        }
        
        return days.reversed()
    }
    
    // Calculate weekly average
    private func weeklyAverage() -> TimeInterval {
        let days = weekDays()
        let totalTime = days.reduce(0) { $0 + $1.1 }
        return days.isEmpty ? 0 : totalTime / Double(days.count)
    }
    
    // Calculate monthly average
    private func monthlyAverage() -> TimeInterval {
        let days = monthDays()
        let totalTime = days.reduce(0) { $0 + $1.1 }
        return days.isEmpty ? 0 : totalTime / Double(days.count)
    }
    
    // Calculate bar height based on wear time
    private func barHeight(for timeInterval: TimeInterval) -> CGFloat {
        let maxHeight: CGFloat = 80
        let hoursWorn = timeInterval / 3600
        
        // Target is typically 8-22 hours for orthodontic devices
        let targetHours: Double = 16
        
        // Scale height proportionally, max out at 22 hours
        return min(maxHeight * CGFloat(hoursWorn / targetHours), maxHeight)
    }
    
    // Format hours for display under bars
    private func hourFormatter(_ timeInterval: TimeInterval) -> String {
        let hours = Int(timeInterval / 3600)
        return "\(hours)h"
    }
    
    // Generate CSV data for export
    private func generateCSV() {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        
        var csv = "Date,Hours Worn\n"
        
        // Combine and sort all statistics
        var allStats: [(Date, TimeInterval)] = []
        for (date, time) in device.monthlyStats {
            allStats.append((date, time))
        }
        
        // Sort by date (newest first)
        allStats.sort { $0.0 > $1.0 }
        
        // Add each day to CSV
        for (date, time) in allStats {
            let hours = time / 3600
            csv.append("\(formatter.string(from: date)),\(String(format: "%.2f", hours))\n")
        }
        
        self.csvData = csv
    }
    
    private let dayFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "E"
        return formatter
    }()
    
    private let dayOfMonthFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "d"
        return formatter
    }()
}

// View for exporting CSV data
struct ExportView: View {
    let csvData: String
    let deviceName: String
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            VStack {
                Text("Export Data for \(deviceName)")
                    .font(.headline)
                    .padding()
                
                ScrollView {
                    Text(csvData)
                        .font(.system(.body, design: .monospaced))
                        .padding()
                }
                .background(Color.secondary.opacity(0.1))
                .cornerRadius(8)
                .padding()
                
                Button(action: {
                    shareCSV()
                }) {
                    HStack {
                        Image(systemName: "square.and.arrow.up")
                        Text("Share CSV File")
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.accentColor)
                    .foregroundColor(.white)
                    .cornerRadius(8)
                }
                .padding()
            }
            .navigationBarItems(trailing: Button("Done") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
    
    private func shareCSV() {
        // Create a temporary file
        let filename = "\(deviceName.replacingOccurrences(of: " ", with: "_"))_wear_time.csv"
        let path = FileManager.default.temporaryDirectory.appendingPathComponent(filename)
        
        do {
            try csvData.write(to: path, atomically: true, encoding: .utf8)
            
            // Create the share sheet
            let activityVC = UIActivityViewController(
                activityItems: [path],
                applicationActivities: nil
            )
            
            // Present the share sheet
            if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
               let rootViewController = windowScene.windows.first?.rootViewController {
                rootViewController.present(activityVC, animated: true, completion: nil)
            }
        } catch {
            print("Error creating CSV file: \(error)")
        }
    }
}

struct DeviceListView_Previews: PreviewProvider {
    static var previews: some View {
        DeviceListView()
            .environmentObject(OTTDeviceManager())
    }
}
